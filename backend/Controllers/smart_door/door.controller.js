const Door = require('../../models/smart_door.model');
const DoorHistory = require('../../models/smart_door_history');
///require('../../models/user.model');
//const DoorData = require('../../models/smart_door_data.model');
const MQTT = require('../../services/doorService')
const Notification = require('../../models/notification.model');
const { Admin } = require('../../models/account.model');
const User = require('../../models/user.model');

const setDoorPassword = async (req, res) => {
  try {
    const { password } = req.body;
    if (!password) {
      return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u.' });
    }

    let door = await Door.findOne();
    if (door) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng thay ƒë·ªïi m·∫≠t kh·∫©u.' });
    } else {
      door = new Door({ password, status: 'locked' });
      await door.save();
      return res.status(200).json({ message: 'ƒê·∫∑t m·∫≠t kh·∫©u th√†nh c√¥ng!', door });
    }
  } catch (error) {
    return res.status(500).json({ message: 'L·ªói khi ƒë·∫∑t m·∫≠t kh·∫©u cho c·ª≠a.', error: error.message });
  }
};

const changeDoorPassword = async (req, res) => {
  try {
    const { userId, currentPassword, newPassword } = req.body;
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i v√† m·∫≠t kh·∫©u m·ªõi.' });
    }

    let door = await Door.findOne();
    if (!door) {
      return res.status(404).json({ message: 'C·ª≠a ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng ƒë·∫∑t m·∫≠t kh·∫©u tr∆∞·ªõc.' });
    }

    if (door.password !== currentPassword) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.' });
    }

    door.password = newPassword;
    door.status = 'locked';
    await door.save();
    const users = await User.find().select('_id');
    if (users.length > 0) {
      const payloads = users.map(u => ({
        message: `Ng∆∞·ªùi d√πng ${userId} v·ª´a ƒë·ªïi m·∫≠t kh·∫©u c·ª≠a th√†nh ${newPassword}`,
        userID: u._id
      }));

      await Notification.insertMany(payloads);
    }

    res.status(200).json({ message: 'Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!', door });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi thay ƒë·ªïi m·∫≠t kh·∫©u cho c·ª≠a.', error: error.message });
  }
};


const accessDoor = async (req, res) => {
  try {
    const { password, userId } = req.body;
    //console.log(userId)
    if (!password) {
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u.' });
    }

    const door = await Door.findOne();
    if (!door) {
      return res.status(404).json({ message: 'C·ª≠a ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p m·∫≠t kh·∫©u.' });
    }


    if (door.password === password) {
      door.status = 'unlocked';
      door.lastAccessedAt = new Date();
      await door.save();
      MQTT.sendDoorStatus(1, userId)
      res.status(200).json({ message: 'C·ª≠a ƒë√£ m·ªü!', door });
    } else {
      const doorHistory = new DoorHistory({
        door: door._id,
        action: 'failed',
        notes: 'Nh·∫≠p m·∫≠t m√£',
        userID: userId
      });
      await doorHistory.save();

      const aminId = await Admin.findOne({}).select('_id')
      await Notification.create({
        message: `Ng∆∞·ªùi d√πng ${userId} m·ªü c·ª≠a b·∫±ng m·∫≠t kh·∫©u th·∫•t b·∫°i`,             // ho·∫∑c m·ªôt device m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
        userID: aminId || null
      });
      res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
    }
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi truy c·∫≠p c·ª≠a.', error: error.message });
  }
};

const closeDoor = async (req, res) => {
  try {
    let updatedDoor = await Door.findOne();
    const { userId } = req.body;

    if (!updatedDoor) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c·ª≠a!" });
    }

    if (updatedDoor.status === 'locked') {
      return res.status(400).json({ message: "C·ª≠a ƒë√£ ƒë√≥ng r·ªìi!" });
    }

    updatedDoor.status = 'locked';
    await updatedDoor.save();

    // G·ª≠i t√≠n hi·ªáu ƒë√≥ng c·ª≠a ƒë·∫øn MQTT (n·∫øu c√≥)
    MQTT.sendDoorStatus(0, userId);
    //console.log("üîí C·ª≠a ƒë√£ t·ª± ƒë·ªông ƒë√≥ng.");

    res.status(200).json({ message: "C·ª≠a ƒë√£ ƒë√≥ng th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói ƒë√≥ng c·ª≠a:", error);
    res.status(500).json({ message: "L·ªói server khi ƒë√≥ng c·ª≠a!", error: error.message });
  }
};


const getDoorHistory = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 8;
    const total = await DoorHistory.countDocuments();
    const historyList = await DoorHistory
      .find().sort({ timestamp: -1 })
      .skip((page - 1) * limit)
      .limit(limit)
      .populate({
        path: 'userID',
        select: 'fullname'
      })
    res.status(200).json({ success: true, data: historyList, totalPages: Math.ceil(total / limit) });
  } catch (error) {
    console.error('L·ªói khi l·∫•y door history:', error);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y l·ªãch s·ª≠ c·ª≠a.' });
  }
};
const authorFaceAI = async (req, res) => {
  try {
    const { facePassword } = req.body;
    //console.log(facePassword)
    if (!facePassword) {
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u.' });
    }

    const door = await Door.findOne();
    if (!door) {
      return res.status(404).json({ message: 'C·ª≠a ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p m·∫≠t kh·∫©u.' });
    }
    //console.log(door.password)
    if (door.password === facePassword) {
      return res.status(200).json({ message: 'M·∫≠t kh·∫©u ƒë√∫ng!' });
    } else {
      return res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
    }
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi truy c·∫≠p c·ª≠a.', error: error.message });
  }
};

const accessDoorByFaceAI = async (req, res) => {
  try {
    const { userId } = req.body;
    if (!userId) {
      return res.status(400).json({ message: 'Thi·∫øu userId.' });
    }

    const door = await Door.findOne();
    if (!door) {
      return res.status(404).json({ message: 'C·ª≠a ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.' });
    }

    // 1. M·ªü c·ª≠a
    door.status = 'unlocked';
    door.lastAccessedAt = new Date();
    await door.save();

    // 2. G·ª≠i l·ªánh m·ªü c·ª≠a qua MQTT (1 = unlock)
    MQTT.sendDoorStatus(1, userId);

    // 3. Ghi v√†o l·ªãch s·ª≠
    const history = new DoorHistory({
      door: door._id,
      action: 'open',
      notes: 'Face AI',
      userID: userId
    });
    await history.save();

    return res.status(200).json({
      message: 'C·ª≠a ƒë√£ m·ªü b·∫±ng Face AI!',
    });
  } catch (error) {
    console.error('L·ªói accessDoorByFaceAI:', error);
    return res.status(500).json({
      message: 'L·ªói khi truy c·∫≠p c·ª≠a b·∫±ng Face AI.',
      error: error.message
    });
  }
};


const getDoorStatus = async (req, res) => {
  try {
    const door = await Door.findOne();
    if (!door) {
      return res.status(404).json({ message: 'C·ª≠a ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.' });
    }

    res.status(200).json({ data: door.status }); // Tr·∫£ v·ªÅ 'locked' ho·∫∑c 'unlocked'
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y tr·∫°ng th√°i c·ª≠a.', error: error.message });
  }
};

module.exports = {
  setDoorPassword,
  accessDoor,
  changeDoorPassword,
  //getdoorData,
  closeDoor,
  getDoorStatus,
  getDoorHistory,
  authorFaceAI,
  accessDoorByFaceAI
};
